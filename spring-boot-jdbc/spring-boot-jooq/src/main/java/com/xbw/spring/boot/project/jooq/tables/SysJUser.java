/*
 * This file is generated by jOOQ.
 */
package com.xbw.spring.boot.project.jooq.tables;


import com.xbw.spring.boot.project.jooq.Keys;
import com.xbw.spring.boot.project.jooq.Springboot;
import com.xbw.spring.boot.project.jooq.tables.records.SysJUserRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysJUser extends TableImpl<SysJUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>springboot.sys_j_user</code>
     */
    public static final SysJUser SYS_J_USER = new SysJUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysJUserRecord> getRecordType() {
        return SysJUserRecord.class;
    }

    /**
     * The column <code>springboot.sys_j_user.user_id</code>.
     */
    public final TableField<SysJUserRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>springboot.sys_j_user.user_code</code>. userCode
     */
    public final TableField<SysJUserRecord, String> USER_CODE = createField(DSL.name("user_code"), SQLDataType.VARCHAR(255), this, "userCode");

    /**
     * The column <code>springboot.sys_j_user.user_name</code>. userName
     */
    public final TableField<SysJUserRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(255), this, "userName");

    private SysJUser(Name alias, Table<SysJUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysJUser(Name alias, Table<SysJUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>springboot.sys_j_user</code> table reference
     */
    public SysJUser(String alias) {
        this(DSL.name(alias), SYS_J_USER);
    }

    /**
     * Create an aliased <code>springboot.sys_j_user</code> table reference
     */
    public SysJUser(Name alias) {
        this(alias, SYS_J_USER);
    }

    /**
     * Create a <code>springboot.sys_j_user</code> table reference
     */
    public SysJUser() {
        this(DSL.name("sys_j_user"), null);
    }

    public <O extends Record> SysJUser(Table<O> child, ForeignKey<O, SysJUserRecord> key) {
        super(child, key, SYS_J_USER);
    }

    @Override
    public Schema getSchema() {
        return Springboot.SPRINGBOOT;
    }

    @Override
    public Identity<SysJUserRecord, Long> getIdentity() {
        return (Identity<SysJUserRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SysJUserRecord> getPrimaryKey() {
        return Keys.KEY_SYS_J_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<SysJUserRecord>> getKeys() {
        return Arrays.<UniqueKey<SysJUserRecord>>asList(Keys.KEY_SYS_J_USER_PRIMARY);
    }

    @Override
    public SysJUser as(String alias) {
        return new SysJUser(DSL.name(alias), this);
    }

    @Override
    public SysJUser as(Name alias) {
        return new SysJUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysJUser rename(String name) {
        return new SysJUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysJUser rename(Name name) {
        return new SysJUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
